/// <reference types="bn.js" />
import type { KeypairType, KeyringPair, KeyringPair$Json, KeyringPair$Meta } from '@subwallet/keyring/types';
import type { EncryptedJson } from '@polkadot/util-crypto/json/types';
import type { SingleAddress } from './observable/types';
import type { CreateResult, InjectAccount, KeyringAddress, KeyringAddressType, KeyringItemType, KeyringJson$Meta, KeyringOptions, KeyringPairs$Json, KeyringStruct } from './types';
import { BN } from '@polkadot/util';
import { Base } from './Base';
import { KeyringOption } from './options';
export declare class Keyring extends Base implements KeyringStruct {
    #private;
    readonly keyringOption: KeyringOption;
    addExternal(address: string | Uint8Array, meta?: KeyringPair$Meta): CreateResult;
    addHardware(address: string | Uint8Array, hardwareType: string, meta?: KeyringPair$Meta): CreateResult;
    addMultisig(addresses: (string | Uint8Array)[], threshold: bigint | BN | number, meta?: KeyringPair$Meta): CreateResult;
    addPair(pair: KeyringPair, withMasterPassword: boolean, password?: string): CreateResult;
    addUri(suri: string, meta?: KeyringPair$Meta, type?: KeypairType): CreateResult;
    backupAccount(pair: KeyringPair, password: string): KeyringPair$Json;
    backupAccounts(password: string): Promise<KeyringPairs$Json>;
    createFromJson(json: KeyringPair$Json, meta?: KeyringPair$Meta): KeyringPair;
    createFromUri(suri: string, meta?: KeyringPair$Meta, type?: KeypairType): KeyringPair;
    encryptAccount(pair: KeyringPair, password: string): void;
    forgetAccount(address: string): void;
    forgetAddress(address: string): void;
    forgetContract(address: string): void;
    getAccount(address: string | Uint8Array): KeyringAddress | undefined;
    getAccounts(): KeyringAddress[];
    getAddress(_address: string | Uint8Array, type?: KeyringItemType | null): KeyringAddress | undefined;
    getAddresses(): KeyringAddress[];
    getContract(address: string | Uint8Array): KeyringAddress | undefined;
    getContracts(): KeyringAddress[];
    private rewriteKey;
    private loadAccount;
    private loadAddress;
    private loadContract;
    private loadInjected;
    private allowGenesis;
    loadAll(options: KeyringOptions, injected?: {
        address: string;
        meta: KeyringJson$Meta;
        type?: KeypairType;
    }[]): void;
    restoreAccount(json: KeyringPair$Json, password: string, withMasterPassword: boolean): KeyringPair;
    restoreAccounts(json: EncryptedJson, password: string): void;
    saveAccount(pair: KeyringPair, withMasterPassword?: boolean, password?: string): KeyringPair$Json;
    saveAccountMeta(pair: KeyringPair, meta: KeyringPair$Meta): void;
    saveAddress(address: string, meta: KeyringPair$Meta, type?: KeyringAddressType): KeyringPair$Json;
    saveContract(address: string, meta: KeyringPair$Meta): KeyringPair$Json;
    saveRecent(address: string): SingleAddress;
    addPairWithMasterPassword(pair: KeyringPair): CreateResult;
    changeMasterPassword(newPassphrase: string, oldPassphrase?: string): void;
    migrateWithMasterPassword(address: string, oldPassphrase: string): void;
    unlockKeyring(password: string): void;
    unlockPair(address: string): void;
    lockAll(): void;
    resetWallet(resetAll: boolean): void;
    addInjects(accounts: InjectAccount[]): void;
    private removeInject;
    removeInjects(addresses: string[]): void;
}
